---
description: TypeScript rules and standards for the Mozzy project
globs: ["**/*.ts", "**/*.tsx"]
---

# Mozzy Project TypeScript Rules

## Memory Management

All TypeScript rules must be considered in the context of the project's memory management system:

1. Working Memory:

   - Active type changes are tracked in `/docs/working-memory/open/{task-id}/`
   - Type changes must be documented in task plans
   - Type updates require documentation review
   - See `/docs/features/core-processing/README.md` for current processing types
   - See `/docs/features/podcast/README.md` for podcast-specific types
   - See `/docs/features/posts/README.md` for post-specific types

2. Project Memory:

   - Type system architecture is documented in `/docs/technical/types/`
   - Breaking changes are tracked in `/docs/changes/types/`
   - Type patterns are recorded in `/docs/patterns/types/`
   - See `/docs/features/core-processing/architecture.md` for core type architecture
   - See `/docs/features/podcast/architecture.md` for podcast type architecture
   - See `/docs/features/posts/architecture.md` for post type architecture

3. Documentation Memory:
   - Type templates are stored in `/docs/templates/types/`
   - Common type patterns are documented
   - Type system evolution is tracked
   - See `/docs/features/core-processing/validation.md` for validation patterns
   - See `/docs/features/core-processing/api.md` for API type usage

## Use TypeScript for Type Safety

Mozzy enforces strict type checking across the codebase:

1. Always enable strict mode in tsconfig.
2. Utilize TypeScript's inference whenever possible.
3. Avoid the "any" type unless strictly necessary.

## Code Standards - Type Documentation

```typescript
/**
 * Clear description of the type's purpose and context.
 * Include any important notes about usage or constraints.
 */
export interface ExampleType {
  /** Description with value range if applicable (e.g., 0-1) */
  numericField: number;
  /** Description of what this field represents */
  stringField: string;
  /** Object field description */
  objectField: {
    /** Nested field description */
    nestedField: string;
  };
}
```

### Type Documentation Rules

- Every exported type must have a JSDoc comment explaining its purpose.
- Each field must have an inline JSDoc comment.
- Document optional fields and their implications.
- Include numeric ranges (e.g., 0-1, 0-100).
- Explain relationships with other types.
- Document any default values.
- Include usage examples for complex types.

## Type System Enforcement

### Type Declaration Rules

1. Location:

   - All types MUST be declared in /app/types/.
   - No type declarations allowed outside /app/types/.
   - UI component prop types are the ONLY exception (they stay within their component files).

2. Directory Structure:

   ```
   /app/types/
   ‚îú‚îÄ‚îÄ index.ts              # Main type exports
   ‚îú‚îÄ‚îÄ entities/             # Entity types
   ‚îú‚îÄ‚îÄ processing/           # Processing types
   ‚îú‚îÄ‚îÄ shared/               # Shared types
   ‚îú‚îÄ‚îÄ ui/                   # UI-specific types
   ‚îî‚îÄ‚îÄ logging/              # Logging types
   ```

3. Import Rules:

   - Always import from the main `index.ts` in /app/types.
   - Example: import type { MyType } from "@/app/types"
   - Do not import directly from subdirectories (exception: internal imports within /types).

4. Enforcement:

   - Pre-commit hook checks for type declarations outside /app/types.
   - Pre-commit hook checks for improper type imports.
   - TypeScript type checking is enforced on commit.
   - Run .husky/type-check manually to verify compliance.

5. Documentation:

   - All type changes must be documented with the required JSDoc format.
   - Update type system docs when adding new categories or introducing breaking changes.
   - Keep type exports in index.ts organized by category.

6. Exceptions:
   - UI component prop types remain in the component file if they are only used there.
   - Test-specific types may remain in test files.
   - Generated types from external tools are allowed in their own directories.

## Working Memory Integration

### Task Documentation Requirements

Every task involving types must include:

1. Type Impact Analysis:

   ```markdown
   ## Type System Impact

   - New types added: [list]
   - Modified types: [list]
   - Breaking changes: [yes/no]
   - Migration required: [yes/no]
   ```

2. Documentation Updates:

   ```markdown
   ## Documentation Updates

   - [ ] Type documentation updated
   - [ ] Breaking changes documented
   - [ ] Migration guide added (if needed)
   - [ ] Examples updated
   ```

3. Review Requirements:
   ```markdown
   ## Type Review

   - [ ] Type consistency verified
   - [ ] Import paths checked
   - [ ] Documentation complete
   - [ ] Tests updated
   ```

### Progress Tracking

Track type system changes in updates.md:

```markdown
### YYYY-MM-DD HH:mm - Type System Update

- ‚úì Types Added: List new types
- üîÑ Types Modified: List changes
- üìö Docs Updated: List documentation changes
- ‚ö†Ô∏è Breaking Changes: List breaking changes
```
